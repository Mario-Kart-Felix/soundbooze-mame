Table
=====

Q   = self.HQ[h][0]
hit = self.HQ[h][1]
R   = self.HQ[h][2]

numpy.argmax(self.HQ[h][0])
self.HQ[h][0][r]

State Transition - ts(diff):
============================

def qts(ts, hchop):
    t = ts[1]
    try:
        print("%d %d (%.3f %.3f %.3f) - %s" %(len(H), len(t), numpy.quantile(t, 0.25), numpy.quantile(t, 0.50), numpy.quantile(t, 0.75), hchop))
    except:
        pass

with mss.mss() as sct:

    ts        = [0, []]

    while [ 1 ]:

        ts[0] = time.time()

                h = hash.compute(Image.fromarray(blue))
                hchop = chop(h, len(str(h))/2)
                H[hchop] = hchop 

                qts(ts, hchop)

                if len(ts[1]) > 1000:
                    ts[1].pop(0)
                    ts[1].append(time.time() - ts[0])
                else:
                    ts[1].append(time.time() - ts[0])
                    ts[0] = ts[1]


que
===
act, wait/que, recv[reward/penalty/0] - blocking(timeout)
