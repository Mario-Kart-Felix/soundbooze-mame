TABLE
=====

Q   = self.HQ[h][0]
hit = self.HQ[h][1]
R   = self.HQ[h][2]

numpy.argmax(self.HQ[h][0])
self.HQ[h][0][r]

State Transition - ts(diff):
============================

def qts(ts, h):
    t = ts[1]
    try:
        print("%d %d (%.3f %.3f %.3f) - %s" %(len(H), len(t), numpy.quantile(t, 0.25), numpy.quantile(t, 0.50), numpy.quantile(t, 0.75), hchop))
    except:
        pass

with mss.mss() as sct:

    ts        = [0, []]

    while [ 1 ]:

        ts[0] = time.time()

                h = hash.compute(Image.fromarray(blue))

                qts(ts, h)

                if len(ts[1]) > 1000:
                    ts[1].pop(0)
                    ts[1].append(time.time() - ts[0])
                else:
                    ts[1].append(time.time() - ts[0])
                    ts[0] = ts[1]


QUE, stream
===========

[state]

 - phash
 - ssim-simd (> 0.817)
 - ...

act, async/que, recv[reward/penalty/0] - learn() //blocking(timeout)

                              q1    a1
                              q2    a2
                              q3    a3
                              q4    a4
                              q5    a5*
                              q6      - que[curr3, curr4, a]
                              q7
                              q8
                       *[0,1] q9

                                ...

prev:   curr1        curr1  curr2  curr3  curr4  curr5
curr:         curr1  curr2  curr3  curr4  curr5  curr6 ...
